package org.example;

import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        GerenciadorProdutos gerenciador = new GerenciadorProdutos();
        Scanner scanner = new Scanner(System.in);
        int opcao = -1;

        do {
            try {
                System.out.println("\n--- Menu de Gerenciamento de Produtos ---");
                System.out.println("1. Cadastrar Produto");
                System.out.println("2. Remover Produto");
                System.out.println("3. Adicionar Quantidade");
                System.out.println("4. Listar Produtos");
                System.out.println("0. Sair");
                System.out.print("Escolha uma opção: ");
                opcao = scanner.nextInt();
                scanner.nextLine();

                switch (opcao) {
                    case 1:
                        System.out.print("Digite o nome do produto: ");
                        String nome = scanner.nextLine();

                        System.out.print("Digite a quantidade: ");
                        int quantidade = scanner.nextInt();
                        scanner.nextLine();

                        System.out.print("O produto é perecível? (s/n): ");
                        String tipo = scanner.nextLine();

                        System.out.print("Digite o nome da categoria: ");
                        String catNome = scanner.nextLine();
                        Categoria categoria = new Categoria(catNome);

                        System.out.print("Digite o nome do fornecedor: ");
                        String fornecedorNome = scanner.nextLine();
                        Fornecedor fornecedor = new Fornecedor(fornecedorNome);

                        if (tipo.equalsIgnoreCase("s")) {
                            System.out.print("Digite a data de validade (dd/mm/yyyy): ");
                            String dataValidade = scanner.nextLine();
                            Produto produto = new ProdutoPerecivel(nome, quantidade, categoria, fornecedor, dataValidade);
                            gerenciador.cadastrarProduto(produto);
                        } else {
                            Produto produto = new ProdutoNaoPerecivel(nome, quantidade, categoria, fornecedor);
                            gerenciador.cadastrarProduto(produto);
                        }
                        break;

                    case 2:
                        System.out.print("Digite o nome do produto a ser removido: ");
                        String nomeRemover = scanner.nextLine();
                        try {
                            gerenciador.removerProduto(nomeRemover);
                        } catch (ProdutoNaoEncontradoException e) {
                            System.out.println(e.getMessage());
                        }
                        break;

                    case 3:
                        System.out.print("Digite o nome do produto: ");
                        String nomeAdicionar = scanner.nextLine();
                        System.out.print("Digite a quantidade a ser adicionada: ");
                        int quantidadeAdicionar = scanner.nextInt();
                        scanner.nextLine();
                        try {
                            gerenciador.inserirQuantidade(nomeAdicionar, quantidadeAdicionar);
                        } catch (ProdutoNaoEncontradoException e) {
                            System.out.println(e.getMessage());
                        }
                        break;

                    case 4:
                        gerenciador.listarProdutos();
                        break;

                    case 0:
                        System.out.println("Saindo...");
                        break;

                    default:
                        System.out.println("Opção inválida. Tente novamente.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Entrada inválida. Por favor, insira o valor correto.");
                scanner.nextLine();
            }
        } while (opcao != 0);

        scanner.close();
    }
}




//Categoria

public class Categoria {
    private String nome;

    public Categoria(String nome) {
        this.nome = nome;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    @Override
    public String toString() {
        return nome;
    }
}

//Fornecedor

public class Fornecedor {
    private String nome;

    public Fornecedor(String nome) {
        this.nome = nome;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    @Override
    public String toString() {
        return nome;
    }
}




//GerenciadorDeProdutos

public class GerenciadorProdutos {
    private List<Produto> produtos;

    public GerenciadorProdutos() {
        produtos = new ArrayList<>();
    }

    public void cadastrarProduto(Produto produto) {
        produtos.add(produto);
        System.out.println("Produto cadastrado.");
    }

    public void removerProduto(String nome) throws ProdutoNaoEncontradoException {
        boolean removido = produtos.removeIf(produto -> produto.getNome().equalsIgnoreCase(nome));
        if (removido) {
            System.out.println("Produto removido.");
        } else {
            throw new ProdutoNaoEncontradoException("Produto não encontrado para remoção.");
        }
    }

    public void inserirQuantidade(String nome, int quantidade) throws ProdutoNaoEncontradoException {
        for (Produto produto : produtos) {
            if (produto.getNome().equalsIgnoreCase(nome)) {
                produto.setQuantidade(produto.getQuantidade() + quantidade);
                System.out.println("Quantidade adicionada.");
                return;
            }
        }
        throw new ProdutoNaoEncontradoException("Produto não encontrado para adicionar quantidade.");
    }

    public void listarProdutos() {
        if (produtos.isEmpty()) {
            System.out.println("Nenhum produto cadastrado.");
        } else {
            Collections.sort(produtos);
            for (Produto produto : produtos) {
                System.out.println(produto);
            }
        }
    }
}




//Produto

public abstract class Produto implements Comparable<Produto> {
    protected String nome;
    protected int quantidade;
    protected Categoria categoria;
    protected Fornecedor fornecedor;

    public Produto(String nome, int quantidade, Categoria categoria, Fornecedor fornecedor) {
        this.nome = nome;
        this.quantidade = quantidade;
        this.categoria = categoria;
        this.fornecedor = fornecedor;
    }

    public String getNome() {
        return nome;
    }

    public int getQuantidade() {
        return quantidade;
    }

    public void setQuantidade(int quantidade) {
        this.quantidade = quantidade;
    }

    public Categoria getCategoria() {
        return categoria;
    }

    public Fornecedor getFornecedor() {
        return fornecedor;
    }

    @Override
    public int compareTo(Produto other) {
        return this.nome.compareToIgnoreCase(other.nome);
    }

    @Override
    public String toString() {
        return "Produto: " + nome + ", Quantidade: " + quantidade
                + ", Categoria: " + categoria
                + ", Fornecedor: " + fornecedor;
    }
}




//Produto Nao Encontrado

public class ProdutoNaoEncontradoException extends Exception {
    public ProdutoNaoEncontradoException(String message) {
        super(message);
    }
}

//Produto Perecivel

public class ProdutoPerecivel extends Produto {
    private String dataValidade;

    public ProdutoPerecivel(String nome, int quantidade, Categoria categoria, Fornecedor fornecedor, String dataValidade) {
        super(nome, quantidade, categoria, fornecedor);
        this.dataValidade = dataValidade;
    }

    public String getDataValidade() {
        return dataValidade;
    }

    public void setDataValidade(String dataValidade) {
        this.dataValidade = dataValidade;
    }

    @Override
    public String toString() {
        return super.toString() + ", Data de Validade: " + dataValidade;
    }
}




//Produto não perecivel


public class ProdutoNaoPerecivel extends Produto {

    public ProdutoNaoPerecivel(String nome, int quantidade, Categoria categoria, Fornecedor fornecedor) {
        super(nome, quantidade, categoria, fornecedor);
    }
}
